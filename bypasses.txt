Bypass for bug hunters

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

1-> WAF Bypass using Headers(Password reset poisoning)

	---For waf bypass, and similar---
	X-Forwarded-Host
	X-Forwarded-Port
	X-Forwarded-Scheme
	Origin: 
	nullOrigin: [siteDomain].attacker.com
	X-Frame-Options: Allow
	X-Forwarded-For: 127.0.0.1
	X-Client-IP: 127.0.0.1
	Client-IP: 127.0.0.1

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

2->Rate limit bypasses
  
	a.Changing IP origin using headers
		X-Originating-IP: 127.0.0.1
		X-Forwarded-For: 127.0.0.1
		X-Remote-IP: 127.0.0.1
		X-Remote-Addr: 127.0.0.1
		#or use double X-Forwared-For header
		X-Forwarded-For:
		X-Forwarded-For: 127.0.0.1
	b.Change other headers
		Try changing the user-agent, the cookies... anything that could be able to identify you.
	c.Using null byte and CRLF (a tip from Zseano)
		%00, %0d%0a, %09, %0C, %20, %0

	d.Chaange your Ip using vpn
	e.Re-make the request
	f.add space after parameter value
	#tweets
	https://twitter.com/m4ll0k2/status/1294983599943540738/photo/1
	https://twitter.com/SalahHasoneh1/status/1287366496432332800
	https://twitter.com/SMHTahsin33/status/1295054667613757441(all in one must check)

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

3->2FA Bypass

	a.Reset Password function	
	b.Rate limit
	c.sendin all alphabets instead of number
	d.2FA bypass by substituting part of the request from the session of another account.
		If a parameter with a specific value is sent to verify the code in the request, try sending the value from the request of another account.
		For example, when sending an OTP code, the form ID/user ID or cookie is checked, which is associated with sending the code. If we apply the data from 			the parameters of the account on which you want to bypass code verification (Account 1) to a session of a completely different account (Account 2), 			receive the code and enter it on the second account, then we can bypass the protection on the first account. After reloading the page, 2FA should 			disappear.
	e.Bypass 2FA using the “memorization” functionality.
		Many sites that support 2FA, have a “remember me” functionality. It is useful when the user doesn’t want to enter a 2FA code on subsequent login 			windows. And it is important to identify the way in which 2FA is “remembered”. This can be a cookie, a value in session/local storage, or simply 			attaching 2FA to an IP address.
	f.Information Disclousre(otp leak in response)
	g.Bypassing 2fa Via OAuth mechanism ( Mostly not Applicable one )
		Site.com requests Facebook for OAuth token > Facebook verifies user account > Facebook send callback code > Site.com logs a user in (Rare case)
	h.Bypassing 2fa using response manipulation

		Enter correct OTP -> Intercept & capture the response -> logout -> enter wrong OTP 
		-> Intercept & change the response with successful previous response -> logged in
	i.Bypassing 2fa via CSRF attack on disable 2FA
		Signup for two account -> Login into attacker account & capture the disable 2FA request -> generate CSRF POC with .HTML extension -> Login into victim 			account and fire the request — — -> It disable 2FA which leads to 2FA Bypass.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

4->CSRF Protection Bypass

	a.Clickjacking

		(If you aren’t familiar with clickjacking attacks, more information can be found https://owasp.org/www-community/attacks/Clickjacking.)

		Exploiting clickjacking on the same endpoint bypasses all CSRF protection. Because technically, the request is indeed originating from the legitimate 			site. If the page where the vulnerable endpoint is located on is vulnerable to clickjacking, all CSRF protection will be rendered irrelevant and you 			will be able to achieve the same results as a CSRF attack on the endpoint, albeit with a bit more effort.
	b.Change the request method

	c.Delete the token param or send a blank token
	
	d.Use another session’s CSRF token
	e.Remove the referer header (add this <meta name=”referrer” content=”no-referrer”> in your payload or html code)
	f.Bypass the regex
		If the site is looking for “bank.com” in the referer URL, maybe “bank.com.attacker.com” or “attacker.com/bank.com” will work.

	g.Replacing value of same length
	h.Decoding CSRF tokens
	#tweets
	https://twitter.com/YourNextBugTip/status/1233956268072521728
	 
